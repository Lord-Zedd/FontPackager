<Window x:Class="FontPackager.FontEditor"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FontPackager"
        mc:Ignorable="d" x:Name="window" Icon=".\Resources\icon.ico" Closing="window_Closing"
        Title="Font Packager - Comic Sans" Height="600" Width="720" MinHeight="400" MinWidth="500" UseLayoutRounding="True">
	<Window.Resources>
		<ImageBrush x:Key="DarkCheck" ImageSource="Resources\dtile.png" Stretch="Uniform" TileMode="Tile" Viewport="0,0,12,12" ViewportUnits="Absolute" Opacity="0.5" />
		<ImageBrush x:Key="LightCheck" ImageSource="Resources\ltile.png" Stretch="Uniform" TileMode="Tile" Viewport="0,0,12,12" ViewportUnits="Absolute" Opacity="0.5" />
		<SolidColorBrush x:Key="DarkSolid" Color="#111" />
		<SolidColorBrush x:Key="LightSolid" Color="#EEE" />
		<local:XOriginInverter x:Key="orgconv" />
		<local:ScaleConverter x:Key="scaleconv" />
	</Window.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
		</Grid.RowDefinitions>

		<Grid Grid.Row="0">
			<Menu Height="22">
				<MenuItem Header="File">
					<MenuItem Header="Save H2X Font" Tag="h2x" Click="Save_Click" ToolTip="Saves the open font as a singular font file, using Halo 2 Xbox's validation rules."/>
					<MenuItem Header="Save H2V Font" Tag="h2v" Click="Save_Click" ToolTip="Saves the open font as a singular font file, using Halo 2 Vista's validation rules."/>
					<MenuItem Header="Save H3B Font" Tag="h3b" Click="Save_Click" ToolTip="Saves the open font as a singular font file, using Halo 3 Beta's validation rules."/>
					<MenuItem Header="Save H2MCC Font" Tag="h2mcc" Click="Save_Click" ToolTip="Saves the open font as a singular font file, using Halo 2 MCC's validation rules."/>
				</MenuItem>

				<MenuItem Header="Options">
					<MenuItem Header="Background" ToolTip="Change the background of the character list.">
						<MenuItem x:Name="menuBDrkCheck" IsCheckable="True" IsChecked="{Binding ElementName=dcheck, Path=IsChecked}" Checked="bg_Checked">
							<MenuItem.Header>
								<StackPanel Orientation="Horizontal">
									<Border Width="22" Height="22" BorderThickness="1" BorderBrush="Red"  HorizontalAlignment="Right" Background="{StaticResource ResourceKey=DarkCheck}"/>
									<TextBlock Text="Dark Checkerboard" VerticalAlignment="Center" Margin="4,0,0,0"/>
									<RadioButton x:Name="dcheck" Visibility="Collapsed" GroupName="Bg" IsChecked="True"/>
								</StackPanel>
							</MenuItem.Header>
						</MenuItem>
						<MenuItem x:Name="menuBLgtCheck" IsCheckable="True" IsChecked="{Binding ElementName=lcheck, Path=IsChecked}" Checked="bg_Checked">
							<MenuItem.Header>
								<StackPanel Orientation="Horizontal">
									<Border Width="22" Height="22" BorderThickness="1" BorderBrush="Red"  HorizontalAlignment="Right" Background="{StaticResource ResourceKey=LightCheck}" />
									<TextBlock Text="Light Checkerboard" VerticalAlignment="Center" Margin="4,0,0,0"/>
									<RadioButton x:Name="lcheck" Visibility="Collapsed" GroupName="Bg" />
								</StackPanel>
							</MenuItem.Header>
						</MenuItem>

						<MenuItem x:Name="menuBDrk" IsCheckable="True" IsChecked="{Binding ElementName=dsol, Path=IsChecked}" Checked="bg_Checked">
							<MenuItem.Header>
								<StackPanel Orientation="Horizontal">
									<Border Width="22" Height="22" BorderThickness="1" BorderBrush="Red"  HorizontalAlignment="Right" Background="{StaticResource ResourceKey=DarkSolid}"/>
									<TextBlock Text="Dark Solid" VerticalAlignment="Center" Margin="4,0,0,0"/>
									<RadioButton x:Name="dsol" Visibility="Collapsed" GroupName="Bg" />
								</StackPanel>
							</MenuItem.Header>
						</MenuItem>

						<MenuItem x:Name="menuBLgt" IsCheckable="True" IsChecked="{Binding ElementName=lsol, Path=IsChecked}" Checked="bg_Checked">
							<MenuItem.Header>
								<StackPanel Orientation="Horizontal">
									<Border Width="22" Height="22" BorderThickness="1" BorderBrush="Red"  HorizontalAlignment="Right" Background="{StaticResource ResourceKey=LightSolid}"/>
									<TextBlock Text="Light Solid" VerticalAlignment="Center" Margin="4,0,0,0"/>
									<RadioButton x:Name="lsol" Visibility="Collapsed" GroupName="Bg" />
								</StackPanel>
							</MenuItem.Header>
						</MenuItem>

					</MenuItem>
					<MenuItem Header="Character Tint" ToolTip="When some games render a character, grayscale colors may get overwritten by the text color. This option will tint affected colors so they display as intended.">
						<MenuItem x:Name="menuTNone" IsCheckable="True" Header="None" IsChecked="{Binding ElementName=none, Path=IsChecked}">
							<RadioButton x:Name="none" Visibility="Collapsed" GroupName="Tint" IsChecked="True"/>
						</MenuItem>
						<MenuItem x:Name="menuTCool" IsCheckable="True" Header="Cool" IsChecked="{Binding ElementName=cool, Path=IsChecked}">
							<RadioButton x:Name="cool" Visibility="Collapsed" GroupName="Tint"/>
						</MenuItem>
						<MenuItem x:Name="menuTWarm" IsCheckable="True" Header="Warm" IsChecked="{Binding ElementName=warm, Path=IsChecked}">
							<RadioButton x:Name="warm" Visibility="Collapsed" GroupName="Tint"/>
						</MenuItem>

					</MenuItem>
					<MenuItem x:Name="menuCrop" Header="Crop Sides" IsCheckable="True" ToolTip="Custom characters will have empty space on either side cropped, with that space converted to X Origin/Display Width values."/>

				</MenuItem>
			</Menu>



		</Grid>


		<Grid Grid.Row="1">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
				<RowDefinition Height="Auto"/>
			</Grid.RowDefinitions>

			

			<Expander Header="Header" Grid.Row="0" Margin="4,2">
				<Grid Margin="4">
					<Grid.RowDefinitions>
						<RowDefinition/>
						<RowDefinition/>
					</Grid.RowDefinitions>

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="2*"/>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="*"/>
					</Grid.ColumnDefinitions>
					<TextBlock Text="Name" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" Margin="0,0,2,0" ToolTip="{Binding FontNameToolTip, ElementName=window}"/>
					<TextBox x:Name="fontName" Text="{Binding ElementName=window, Path=Font.Name, Mode=TwoWay, UpdateSourceTrigger=Explicit}"  ToolTip="{Binding FontNameToolTip, ElementName=window}"
							 KeyDown="fontName_KeyDown" Grid.Row="0" Grid.Column="1" MaxLength="32" Margin="2,0"/>

					<Grid Grid.Row="1" Grid.Column="1" Margin="2,2,0,0">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>

						<TextBlock Text="MCC Scale:" VerticalAlignment="Center" HorizontalAlignment="Right" Grid.Column="0" Margin="0,0,2,0" ToolTip="{Binding MCCScaleToolTip, ElementName=window}"/>
						<TextBox x:Name="fontMCCScale" Text="{Binding ElementName=window, Path=Font.MCCScale, Mode=TwoWay, UpdateSourceTrigger=Explicit}" ToolTip="{Binding MCCScaleToolTip, ElementName=window}"
							 Tag="mccscale" KeyDown="HeaderInt_KeyDown" MaxLength="8" VerticalContentAlignment="Center" Grid.Column="1" Margin="2,0"/>
					</Grid>


					<TextBlock Text="Ascend Height:" VerticalAlignment="Center" Grid.Row="0" Grid.Column="2" Margin="2,0" ToolTip="{Binding AscendHeightToolTip, ElementName=window}"/>
					<TextBox x:Name="fontAHeight" Text="{Binding ElementName=window, Path=Font.AscendHeight, Mode=TwoWay, UpdateSourceTrigger=Explicit}" ToolTip="{Binding AscendHeightToolTip, ElementName=window}"
							 Tag="aheight" KeyDown="HeaderShort_KeyDown" MaxLength="8" VerticalContentAlignment="Center" Grid.Row="0" Grid.Column="3" Margin="2,0,2,2"/>

					<TextBlock Text="Lead Height:" VerticalAlignment="Center" Grid.Row="0" Grid.Column="4" Margin="2,0" ToolTip="{Binding LeadHeightToolTip, ElementName=window}"/>
					<TextBox x:Name="fontLHeight" Text="{Binding ElementName=window, Path=Font.LeadHeight, Mode=TwoWay, UpdateSourceTrigger=Explicit}" ToolTip="{Binding LeadHeightToolTip, ElementName=window}"
							 Tag="lheight" KeyDown="HeaderShort_KeyDown" MaxLength="8" VerticalContentAlignment="Center" Grid.Row="0" Grid.Column="5" Margin="2,0,0,2"/>

					<TextBlock Text="Descend Height:" VerticalAlignment="Center" Grid.Row="1" Grid.Column="2"  Margin="2,0" ToolTip="{Binding DescendHeightToolTip, ElementName=window}"/>
					<TextBox x:Name="fontDHeight" Text="{Binding ElementName=window, Path=Font.DescendHeight, Mode=TwoWay, UpdateSourceTrigger=Explicit}" ToolTip="{Binding DescendHeightToolTip, ElementName=window}"
							 Tag="dheight" KeyDown="HeaderShort_KeyDown" MaxLength="8" VerticalContentAlignment="Center" Grid.Row="1" Grid.Column="3" Margin="2,2,2,0"/>

					<TextBlock Text="Lead Width:" VerticalAlignment="Center" Grid.Row="1" Grid.Column="4" Margin="2,0,0,0" ToolTip="{Binding LeadWidthToolTip, ElementName=window}"/>
					<TextBox x:Name="fontLWidth" Text="{Binding ElementName=window, Path=Font.LeadWidth, Mode=TwoWay, UpdateSourceTrigger=Explicit}" ToolTip="{Binding LeadWidthToolTip, ElementName=window}"
							 Tag="lwidth" KeyDown="HeaderShort_KeyDown" MaxLength="8" VerticalContentAlignment="Center" Grid.Row="1" Grid.Column="5" Margin="2,2,0,0"/>



				</Grid>
			</Expander>

			<StackPanel Orientation="Horizontal" VerticalAlignment="Top" Grid.Row="0" HorizontalAlignment="Right" Margin="0,4,4,0">
				<TextBlock Text="Character Range" VerticalAlignment="Center"/>
				<ComboBox x:Name="bigrange" Width="150" VerticalAlignment="Center" ItemsSource="{Binding Ranges, ElementName=window}" DisplayMemberPath="Name" Margin="4,0,0,0"
						  SelectionChanged="bigrange_SelectionChanged">
					<ComboBox.ItemContainerStyle>
						<Style TargetType="ComboBoxItem">
							<Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
						</Style>
					</ComboBox.ItemContainerStyle>
				</ComboBox>
			</StackPanel>

			<Grid Grid.Row="1">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"/>
					<!--<ColumnDefinition Width="Auto"/>-->
				</Grid.ColumnDefinitions>

				<ListBox x:Name="listchars" Grid.Row="1" ScrollViewer.HorizontalScrollBarVisibility="Disabled" SelectionMode="Extended" AllowDrop="True" Drop="listchars_Drop" PreviewDragOver="listchars_PreviewDrag"
					 ScrollViewer.VerticalScrollBarVisibility="Auto" MouseLeftButtonDown="listchars_MouseLeftButtonDown" SelectionChanged="listchars_SelectionChanged"  Padding="1" Margin="4,2,4,2"
					 PreviewKeyDown="listchars_PreviewKeyDown" MouseLeftButtonUp="listchars_MouseLeftButtonUp" PreviewDragEnter="listchars_PreviewDrag" PreviewDragLeave="listchars_PreviewDrag">
					<ListBox.Background>
						<ImageBrush ImageSource="Resources\dtile.png" Stretch="Uniform" TileMode="Tile" Viewport="0,0,12,12" ViewportUnits="Absolute" Opacity="0.5"/>
					</ListBox.Background>
					<ListBox.ItemsPanel>
						<ItemsPanelTemplate>
							<WrapPanel IsItemsHost="True" VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.IsContainerVirtualizable="True"/>
						</ItemsPanelTemplate>
					</ListBox.ItemsPanel>
					<ListBox.ContextMenu>
						<ContextMenu>
							<ContextMenu.CommandBindings>
								<CommandBinding Command="{x:Static local:FontEditor.AddChar}" Executed="AddChar_Executed" />
								<CommandBinding Command="{x:Static local:FontEditor.AddBat}" Executed="AddBat_Executed" />
							</ContextMenu.CommandBindings>
							<MenuItem x:Name="btnAdd" Header="Add New Character..." Command="{x:Static local:FontEditor.AddChar}"/>
							<MenuItem x:Name="btnAddBat" Header="Add New Character(s) From Folder..." Command="{x:Static local:FontEditor.AddBat}"/>
						</ContextMenu>
					</ListBox.ContextMenu>
					<ListBox.ItemContainerStyle>
						<Style TargetType="ListBoxItem">
							<EventSetter Event="PreviewMouseLeftButtonDown" Handler="charitem_PreviewMouseLeftButtonDown"/>
							<EventSetter Event="PreviewMouseLeftButtonUp" Handler="charitem_PreviewMouseLeftButtonUp"/>

							<EventSetter Event="PreviewMouseMove" Handler="charitem_PreviewMouseMove"/>
							<EventSetter Event="PreviewDragEnter" Handler="listchars_PreviewDrag"/>
							<EventSetter Event="PreviewDragLeave" Handler="listchars_PreviewDrag"/>

							<EventSetter Event="MouseLeave" Handler="charitem_MouseLeave"/>
							<Setter Property="ToolTip">
								<Setter.Value>
									<StackPanel>
										<TextBlock>Unicode: <Run Text="{Binding UnicIndex, StringFormat={}{0:X4}}"/>  [<Run Text="{Binding UnicIndex, StringFormat={}{0:D}}"/>]</TextBlock>
										<TextBlock>UTF8: <Run Text="{Binding UTFString, Mode=OneTime}"/></TextBlock>
										<TextBlock>Width: <Run Text="{Binding Width, StringFormat={}{0:D}}"/></TextBlock>
										<TextBlock>Height: <Run Text="{Binding Height, StringFormat={}{0:D}}"/></TextBlock>
										<TextBlock/>
										<TextBlock>Select characters then drag and drop to other open fonts, or the System Font Converter.</TextBlock>
										<TextBlock>Double-Click to copy this unicode character to your clipboard.</TextBlock>
										<TextBlock/>
										<TextBlock>(While selected)</TextBlock>
										<TextBlock>The <Run Foreground="Red">Red</Run> line represents the Display Width. (Should be on the right)</TextBlock>
										<TextBlock>The <Run Foreground="Lime">Green</Run> line represents the Y Origin.</TextBlock>
										<TextBlock>The <Run Foreground="Blue">Blue</Run> line represents the X Origin. (Should be on the left)</TextBlock>
									</StackPanel>
								</Setter.Value>
							</Setter>
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="ListBoxItem">
										<Border Name="Border" Padding="3" BorderThickness="1" SnapsToDevicePixels="true"  Margin="1" VerticalAlignment="Center" HorizontalAlignment="Center" Background="Transparent">
											<Canvas x:Name="charCanv" Width="{Binding Path=Width, Converter={StaticResource scaleconv}}" Height="{Binding Path=Height, Converter={StaticResource scaleconv}}" Background="Transparent" >
												<Grid Width="{Binding ActualWidth, ElementName=charCanv}" Height="{Binding ActualHeight, ElementName=charCanv}">
													<Image Source="{Binding Image}" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="True" />
												</Grid>

												<Line SnapsToDevicePixels="True" x:Name="vert" RenderOptions.EdgeMode="Aliased" StrokeThickness="1" Stroke="Blue" Visibility="Hidden"
													  X1="{Binding Path=OriginX, Converter={StaticResource orgconv}}" X2="{Binding Path=OriginX, Converter={StaticResource orgconv}}"
													  Y1="0" Y2="{Binding Path=Height, Converter={StaticResource scaleconv}}" />

												<Line SnapsToDevicePixels="True" x:Name="horiz" RenderOptions.EdgeMode="Aliased" StrokeThickness="1" Stroke="Lime"  Visibility="Hidden"
													  X1="{Binding Path=OriginX, Converter={StaticResource orgconv}}" X2="{Binding Path=DisplayWidth, Converter={StaticResource scaleconv}}"
													  Y1="{Binding Path=OriginY, Converter={StaticResource scaleconv}}" Y2="{Binding Path=OriginY, Converter={StaticResource scaleconv}}" />

												<Line SnapsToDevicePixels="True" x:Name="dwidth"  RenderOptions.EdgeMode="Aliased" StrokeThickness="1" Stroke="Red" Visibility="Hidden"
													  X1="{Binding Path=DisplayWidth, Converter={StaticResource scaleconv}}" X2="{Binding Path=DisplayWidth, Converter={StaticResource scaleconv}}"
													  Y1="0" Y2="{Binding Path=Height, Converter={StaticResource scaleconv}}" />
												
											</Canvas>
											<Border.ContextMenu>
												<ContextMenu>
													<ContextMenu.CommandBindings>
														<CommandBinding Command="{x:Static local:FontEditor.ReplaceChar}" Executed="ReplaceChar_Executed" CanExecute="SingleChar_CanExecute"/>
														<CommandBinding Command="{x:Static local:FontEditor.ExtractChar}" Executed="ExtractChar_Executed" CanExecute="SingleChar_CanExecute"/>
														<CommandBinding Command="{x:Static local:FontEditor.ExtractBat}" Executed="ExtractBat_Executed" CanExecute="ExtractBat_CanExecute"/>
														<CommandBinding Command="{x:Static local:FontEditor.RemoveChar}" Executed="RemoveChar_Executed"/>
													</ContextMenu.CommandBindings>
													<MenuItem x:Name="btnRepl" Header="Replace Selected Character..." Command="{x:Static local:FontEditor.ReplaceChar}"/>
													<MenuItem x:Name="btnExt" Header="Save Selected Sharacter As..." Command="{x:Static local:FontEditor.ExtractChar}"/>
													<MenuItem x:Name="btnBatExt" Header="Save Selected Character(s) To Folder..." Command="{x:Static local:FontEditor.ExtractBat}"/>
													<MenuItem x:Name="btnRemove" Header="Remove Selected Character(s)..." Command="{x:Static local:FontEditor.RemoveChar}"/>

												</ContextMenu>
											</Border.ContextMenu>
										</Border>
										<ControlTemplate.Triggers>
											<Trigger Property="IsSelected" Value="true">

												<Setter TargetName="Border" Property="BorderBrush" Value="Yellow"/>
												<Setter TargetName="Border" Property="Background" Value="#40FFFF00"/>

												<Setter TargetName="horiz" Property="Visibility" Value="Visible"/>
												<Setter TargetName="vert" Property="Visibility" Value="Visible"/>
												<Setter TargetName="dwidth" Property="Visibility" Value="Visible"/>
											</Trigger>

										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ListBox.ItemContainerStyle>
				</ListBox>

				<!--<Expander Grid.Column="1" ExpandDirection="Left" Margin="2,4,2,4">
					<Expander.Header>
						<TextBlock Text="Kerning Pairs">
							<TextBlock.LayoutTransform>
								<TransformGroup>
									<ScaleTransform/>
									<SkewTransform/>
									<RotateTransform Angle="90"/>
									<TranslateTransform/>
								</TransformGroup>
							</TextBlock.LayoutTransform>
						</TextBlock>
					</Expander.Header>
					<Grid Margin="0,0,2,0" Width="150">
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>


						<ListBox Grid.Row="0">

						</ListBox>
						
						<Button Content="Add..." Grid.Row="1"/>

						
					</Grid>

					
				</Expander>-->
			</Grid>
			
			

			<GroupBox Header="Selected Character" Margin="4,2,4,4" Grid.Row="2">
				<Grid Margin="2">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="*"/>
					</Grid.ColumnDefinitions>

					<TextBlock Text="Display Width:" VerticalAlignment="Center" Grid.Column="0" Margin="0,0,2,0" ToolTip="{Binding DisplayWidthToolTip, ElementName=window}"/>
					<TextBox x:Name="charWidth" Tag="cwidth" KeyDown="CharacterWidth_KeyDown" Grid.Column="1" Margin="2,0,2,0" VerticalContentAlignment="Center" ToolTip="{Binding DisplayWidthToolTip, ElementName=window}"/>
					<TextBlock Text="Origin x:" VerticalAlignment="Center" Grid.Column="2" Margin="2,0,2,0" ToolTip="{Binding XOriginToolTip, ElementName=window}"/>
					<TextBox x:Name="charOriginX" Tag="corx" KeyDown="CharacterShort_KeyDown" MaxLength="7" Grid.Column="3" Margin="2,0,2,0" VerticalContentAlignment="Center" ToolTip="{Binding XOriginToolTip, ElementName=window}"/>
					<TextBlock Text="Origin y:" VerticalAlignment="Center" Grid.Column="4" Margin="2,0,2,0" ToolTip="{Binding YOriginToolTip, ElementName=window}"/>
					<TextBox x:Name="charOriginY" Tag="cory" KeyDown="CharacterShort_KeyDown" MaxLength="7" VerticalContentAlignment="Center" Grid.Column="5" Margin="2,0,0,0" ToolTip="{Binding YOriginToolTip, ElementName=window}"/>

				</Grid>

			</GroupBox>

		</Grid>

	</Grid>
</Window>
